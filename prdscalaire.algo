
PROCEDURE dot_product(v1,v2 : ARRAY_OF INTEGER, VAR dot : INTEGER)
VAR
    i : INTEGER;
BEGIN
    dot :=0;
    i:=0;
    IF (v1.length <> v2.length) THEN
        Write("vectors with different sizes we cannot calculat dot product");
        dot := NaN; 
    END_IF
    FOR (i=0, i = v1.length-1, i++) DO
        dot := dot + v1[i]*v2[i];
    END_FOR
END
ALGORITHM orth_vectors
VAR
    v1,v2 : ARRAY_OF INTEGER [100];
    dot : INTEGER;
BEGIN
    n1 := read_size();
    read_array(n1,v1);
    n2 := read_size();
    read_array(n2,v2);
    dot_product(v1,v2,dot);
    IF (dot = 0) THEN
        Write("V1 and V2 are orthogonal");
    ELSE
        Write("V1 and V2 are not orthogonal");
    END_IF
END
FUNCTION dot_product(v1,v2 : ARRAY_OF INTEGER) : INTEGER
VAR
    i, dot : INTEGER;
BEGIN
    dot :=0;
    i:=0;
    IF (v1.length <> v2.length) THEN
        Write("vectors with different sizes we cannot calculat dot product");
        RETURN NaN; 
    END_IF
    FOR (i=0,i = v1.length-1, i++) DO
        dot := dot + v1[i]*v2[i];
    END_FOR
    RETURN dot ;
END
ALGORITHM orth_vectors
VAR
    v1,v2 : ARRAY_OF INTEGER [100];
    dot : INTEGER;
BEGIN
    n1 := read_size();
    read_array(n1,v1);
    n2 := read_size(); 
    read_array(n2,v2);
    dot := dot_product(v1,v2);
    IF (dot = 0) THEN
        Write("V1 and V2 are orthogonal");
    ELSE
        Write("V1 and V2 are not orthogonal");
    END_IF
END 